name: Desplegar a producci√≥n # Updated name

on:
  workflow_dispatch: # Changed from push to main

permissions:
  contents: read
  deployments: write

jobs:
  test:
    name: Ejecutar pruebas
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4 # Standardized version

      - name: Setup Node
        uses: actions/setup-node@v3.9.1
        with:
          node-version: '22'

      - name: Instalar pnpm
        run: |
          npm install --global corepack@latest
          corepack enable pnpm          

      - name: Instalar dependencias
        run: pnpm install

      - name: Ejecutar tests
        run: pnpm test

      - name: Get Commit Info # Added step for commit details
        id: get_commit_info
        run: |
          echo "sha_short=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
          # Ensure the message is properly escaped for JSON or use a simpler format if issues arise
          commit_message=$(git log -1 --pretty=%B ${{ github.sha }} | head -n 1) # Get first line of commit message
          echo "message=${commit_message}" >> $GITHUB_OUTPUT

      - name: Post failure to Slack
        if: failure()
        uses: slackapi/slack-github-action@v2.1.0 # Kept user-specified version
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "‚ùå *Fallaron los tests en `${{ github.repository }}`*\n\n*Branch:* `${{ github.ref_name }}`\n*Commit:* `${{ steps.get_commit_info.outputs.sha_short }}` - `${{ steps.get_commit_info.outputs.message }}`\n*Triggered by:* `${{ github.actor }}`"
            attachments: [
              {
                "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ver logs de la ejecucion>"
              }
            ]
  
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Setup Node # Added Node setup
        uses: actions/setup-node@v3.9.1
        with:
          node-version: '22'

      - name: Instalar pnpm
        run: |
          npm install --global corepack@latest
          corepack enable pnpm          

      - name: Instalar dependencias
        run: pnpm install

      - name: Obtener coverage
        run: pnpm test --coverage

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5 # Kept user-specified version
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  deploy:
    name: Deploy to Production # Added job name
    runs-on: ubuntu-latest
    environment: production # Changed from staging and uncommented
    timeout-minutes: 60
    needs: [test, sonarqube] 
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # Standardized version

      - name: Setup Node # Added Node setup
        uses: actions/setup-node@v3.9.1
        with:
          node-version: '22'

      - name: Instalar pnpm
        run: |
          npm install --global corepack@latest
          corepack enable pnpm  

      - name: Build
        run: |
          pnpm install
          pnpm build
          
      - name: Build & Deploy Worker to Production
        id: deploy
        uses: cloudflare/wrangler-action@v3 # Kept user-specified version
        with:
          wranglerVersion: "4.16.1" # Kept user-specified wrangler version
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production # Changed to production, updated comment

      - name: Get Commit Info # Added step for commit details
        id: get_commit_info
        run: |
          echo "sha_short=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
          commit_message=$(git log -1 --pretty=%B ${{ github.sha }} | head -n 1) # Get first line
          echo "message=${commit_message}" >> $GITHUB_OUTPUT

      - name: Post success to Slack
        if: success()
        uses: slackapi/slack-github-action@v2.1.0 # Kept user-specified version
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "üöÄ *Deploy exitoso a `production`* desde `${{ github.repository }}`\n\n*Branch:* `${{ github.ref_name }}`\n*Commit:* `${{ steps.get_commit_info.outputs.sha_short }}` - `${{ steps.get_commit_info.outputs.message }}`\n*Triggered by:* `${{ github.actor }}`"
            attachments: [
              {
                "text": "<${{ steps.deploy.outputs.deployment-url }}|Visitar el sitio desplegado>"
              }
            ]

      - name: Post failure to Slack
        if: failure()
        uses: slackapi/slack-github-action@v2.1.0 # Kept user-specified version
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "‚ùå *Fallo el deploy a `production`* en `${{ github.repository }}`\n\n*Branch:* `${{ github.ref_name }}`\n*Commit:* `${{ steps.get_commit_info.outputs.sha_short }}` - `${{ steps.get_commit_info.outputs.message }}`\n*Triggered by:* `${{ github.actor }}`"
            attachments: [
              {
                "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ver logs de la ejecucion>"
              }
            ]

      - name: Crear Deployment en GitHub
        uses: bobheadxi/deployments@v1 # Kept user-specified version
        id: creardeploy
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production # Changed to production
          ref: ${{ github.sha }}
      
      - name: Marcar Deployment como exitoso
        uses: bobheadxi/deployments@v1 # Kept user-specified version
        if: success() # Ensure this runs only on overall success of previous steps
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production # Changed to production
          status: success
          deployment_id: ${{ steps.creardeploy.outputs.deployment_id }}
          env_url: ${{ steps.deploy.outputs.deployment-url }}

      - name: Marcar Deployment como fallido # Added step to mark deployment failure
        uses: bobheadxi/deployments@v1
        if: failure() # Ensure this runs only on failure
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production 
          status: failure
          deployment_id: ${{ steps.creardeploy.outputs.deployment_id }}
          env_url: ${{ steps.deploy.outputs.deployment-url }} # URL might not be applicable on failure
